@model Cosmos.Models.Order

@{
	ViewData["Title"] = "Order Details";
}

<div class="container-fluid">
	<div class="container page-padding h100">
		<div class="row">
			<div class="col-12">
				<h1>Order Details</h1>
			</div>
			@if (Model.OrderItems != null && Model.OrderItems.Count > 0)
			{
				<div class="col-md-8 col-lg-9">
					@foreach (var orderItem in Model.OrderItems)
					{
						<div class="row mt-3 mb-3">
							<div class="col-12">
								<hr>
							</div>
							<div class="col-12 d-flex justify-content-between">
								<div class="d-flex">
									<div>
										<p class="h4">@orderItem.ProductName</p>
										<p>Quanity: @orderItem.Quantity</p>
									</div>
								</div>
								<p class="fw-bolder">@orderItem.Price.ToString("C")</p>
							</div>
						</div>
					}
				</div>
				<div class="col-md-4 col-lg-3 mt-4">
					<div class="card bg-dark border-0 p-3">
						<div class="card-body">
							<h4>Order Summary</h4>
							<div class="d-flex justify-content-between">
								<p>Items (@Model.OrderItems.Count)</p>
								<p>@(Model.OrderItems.Sum(c => (decimal)(c.Quantity * c.Price)).ToString("C"))</p>
							</div>
							<div class="d-flex justify-content-between">
								<p>Estimated tax: </p>
								<p>-</p>
							</div>
							<hr>
							<div class="d-flex justify-content-between">
								<p class="fw-bolder">Total</p>
								<p class="fw-bolder">@(Model.OrderItems.Sum(c => (decimal)(c.Quantity *
											c.Price)).ToString("C"))</p>
							</div>
							<div>
								@if (!Model.PaymentReceived)
								{
									<form asp-action="ProcessPayment">
										<button class="btn btn-brand-success d-block">Buy now</button>
									</form>
								}
							</div>
						</div>
					</div>
				</div>
			} else {
				<div class="col-12">
					<hr>
					<p class="text-brand-muted">There are no orders!</p>
				</div>
			}
		</div>
	</div>
</div>